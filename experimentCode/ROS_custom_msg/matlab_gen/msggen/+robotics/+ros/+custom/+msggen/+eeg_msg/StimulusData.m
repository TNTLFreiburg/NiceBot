classdef StimulusData < robotics.ros.Message
    %StimulusData MATLAB implementation of eeg_msg/StimulusData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'eeg_msg/StimulusData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e37986ca19e9f8635e420f034def3c7e' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsFloat64MultiArrayClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Float64MultiArray') % Dispatch to MATLAB class for message type std_msgs/Float64MultiArray
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
        StdMsgsStringClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/String') % Dispatch to MATLAB class for message type std_msgs/String
    end
    
    properties (Dependent)
        Header
        RawSignal
        JoystickData
        Prediction
        GroundTruth
        ElectrodeLabels
        StimulusState
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'RawSignal', [], 'JoystickData', [], 'Prediction', [], 'GroundTruth', [], 'ElectrodeLabels', [], 'StimulusState', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ElectrodeLabels', 'GroundTruth', 'Header', 'JoystickData', 'Prediction', 'RawSignal', 'StimulusState'} % List of non-constant message properties
        ROSPropertyList = {'electrodeLabels', 'groundTruth', 'header', 'joystickData', 'prediction', 'rawSignal', 'stimulusState'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = StimulusData(msg)
            %StimulusData Construct the message object StimulusData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'StimulusData', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function rawsignal = get.RawSignal(obj)
            %get.RawSignal Get the value for property RawSignal
            if isempty(obj.Cache.RawSignal)
                obj.Cache.RawSignal = feval(obj.StdMsgsFloat64MultiArrayClass, obj.JavaMessage.getRawSignal);
            end
            rawsignal = obj.Cache.RawSignal;
        end
        
        function set.RawSignal(obj, rawsignal)
            %set.RawSignal Set the value for property RawSignal
            validateattributes(rawsignal, {obj.StdMsgsFloat64MultiArrayClass}, {'nonempty', 'scalar'}, 'StimulusData', 'rawsignal');
            
            obj.JavaMessage.setRawSignal(rawsignal.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RawSignal)
                obj.Cache.RawSignal.setJavaObject(rawsignal.getJavaObject);
            end
        end
        
        function joystickdata = get.JoystickData(obj)
            %get.JoystickData Get the value for property JoystickData
            if isempty(obj.Cache.JoystickData)
                obj.Cache.JoystickData = feval(obj.StdMsgsFloat64MultiArrayClass, obj.JavaMessage.getJoystickData);
            end
            joystickdata = obj.Cache.JoystickData;
        end
        
        function set.JoystickData(obj, joystickdata)
            %set.JoystickData Set the value for property JoystickData
            validateattributes(joystickdata, {obj.StdMsgsFloat64MultiArrayClass}, {'nonempty', 'scalar'}, 'StimulusData', 'joystickdata');
            
            obj.JavaMessage.setJoystickData(joystickdata.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.JoystickData)
                obj.Cache.JoystickData.setJavaObject(joystickdata.getJavaObject);
            end
        end
        
        function prediction = get.Prediction(obj)
            %get.Prediction Get the value for property Prediction
            if isempty(obj.Cache.Prediction)
                obj.Cache.Prediction = feval(obj.StdMsgsFloat64MultiArrayClass, obj.JavaMessage.getPrediction);
            end
            prediction = obj.Cache.Prediction;
        end
        
        function set.Prediction(obj, prediction)
            %set.Prediction Set the value for property Prediction
            validateattributes(prediction, {obj.StdMsgsFloat64MultiArrayClass}, {'nonempty', 'scalar'}, 'StimulusData', 'prediction');
            
            obj.JavaMessage.setPrediction(prediction.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Prediction)
                obj.Cache.Prediction.setJavaObject(prediction.getJavaObject);
            end
        end
        
        function groundtruth = get.GroundTruth(obj)
            %get.GroundTruth Get the value for property GroundTruth
            if isempty(obj.Cache.GroundTruth)
                obj.Cache.GroundTruth = feval(obj.StdMsgsFloat64MultiArrayClass, obj.JavaMessage.getGroundTruth);
            end
            groundtruth = obj.Cache.GroundTruth;
        end
        
        function set.GroundTruth(obj, groundtruth)
            %set.GroundTruth Set the value for property GroundTruth
            validateattributes(groundtruth, {obj.StdMsgsFloat64MultiArrayClass}, {'nonempty', 'scalar'}, 'StimulusData', 'groundtruth');
            
            obj.JavaMessage.setGroundTruth(groundtruth.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GroundTruth)
                obj.Cache.GroundTruth.setJavaObject(groundtruth.getJavaObject);
            end
        end
        
        function electrodelabels = get.ElectrodeLabels(obj)
            %get.ElectrodeLabels Get the value for property ElectrodeLabels
            if isempty(obj.Cache.ElectrodeLabels)
                obj.Cache.ElectrodeLabels = feval(obj.StdMsgsStringClass, obj.JavaMessage.getElectrodeLabels);
            end
            electrodelabels = obj.Cache.ElectrodeLabels;
        end
        
        function set.ElectrodeLabels(obj, electrodelabels)
            %set.ElectrodeLabels Set the value for property ElectrodeLabels
            validateattributes(electrodelabels, {obj.StdMsgsStringClass}, {'nonempty', 'scalar'}, 'StimulusData', 'electrodelabels');
            
            obj.JavaMessage.setElectrodeLabels(electrodelabels.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ElectrodeLabels)
                obj.Cache.ElectrodeLabels.setJavaObject(electrodelabels.getJavaObject);
            end
        end
        
        function stimulusstate = get.StimulusState(obj)
            %get.StimulusState Get the value for property StimulusState
            if isempty(obj.Cache.StimulusState)
                obj.Cache.StimulusState = feval(obj.StdMsgsStringClass, obj.JavaMessage.getStimulusState);
            end
            stimulusstate = obj.Cache.StimulusState;
        end
        
        function set.StimulusState(obj, stimulusstate)
            %set.StimulusState Set the value for property StimulusState
            validateattributes(stimulusstate, {obj.StdMsgsStringClass}, {'nonempty', 'scalar'}, 'StimulusData', 'stimulusstate');
            
            obj.JavaMessage.setStimulusState(stimulusstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.StimulusState)
                obj.Cache.StimulusState.setJavaObject(stimulusstate.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.RawSignal = [];
            obj.Cache.JoystickData = [];
            obj.Cache.Prediction = [];
            obj.Cache.GroundTruth = [];
            obj.Cache.ElectrodeLabels = [];
            obj.Cache.StimulusState = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.RawSignal = copy(obj.RawSignal);
            cpObj.JoystickData = copy(obj.JoystickData);
            cpObj.Prediction = copy(obj.Prediction);
            cpObj.GroundTruth = copy(obj.GroundTruth);
            cpObj.ElectrodeLabels = copy(obj.ElectrodeLabels);
            cpObj.StimulusState = copy(obj.StimulusState);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.RawSignal = feval([obj.StdMsgsFloat64MultiArrayClass '.loadobj'], strObj.RawSignal);
            obj.JoystickData = feval([obj.StdMsgsFloat64MultiArrayClass '.loadobj'], strObj.JoystickData);
            obj.Prediction = feval([obj.StdMsgsFloat64MultiArrayClass '.loadobj'], strObj.Prediction);
            obj.GroundTruth = feval([obj.StdMsgsFloat64MultiArrayClass '.loadobj'], strObj.GroundTruth);
            obj.ElectrodeLabels = feval([obj.StdMsgsStringClass '.loadobj'], strObj.ElectrodeLabels);
            obj.StimulusState = feval([obj.StdMsgsStringClass '.loadobj'], strObj.StimulusState);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.RawSignal = saveobj(obj.RawSignal);
            strObj.JoystickData = saveobj(obj.JoystickData);
            strObj.Prediction = saveobj(obj.Prediction);
            strObj.GroundTruth = saveobj(obj.GroundTruth);
            strObj.ElectrodeLabels = saveobj(obj.ElectrodeLabels);
            strObj.StimulusState = saveobj(obj.StimulusState);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.eeg_msg.StimulusData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.eeg_msg.StimulusData;
            obj.reload(strObj);
        end
    end
end
